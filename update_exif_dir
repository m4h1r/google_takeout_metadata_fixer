#!/bin/bash

# Überprüfen, ob exiftool installiert ist
if ! command -v exiftool &> /dev/null
then
    echo "exiftool ist nicht installiert. Bitte installieren Sie es mit 'brew install exiftool'."
    exit 1
fi

# Funktion zur Konvertierung des Datums
convert_date() {
    local input_date="$1"
    # Entfernen von "UTC" und umwandeln in das richtige Format
    echo "$input_date" | sed 's/ UTC$//' | sed 's/\([0-9]\{2\}\)\.\([0-9]\{2\}\)\.\([0-9]\{4\}\), \([0-9]\{2\}\):\([0-9]\{2\}\):\([0-9]\{2\}\)/\3:\2:\1 \4:\5:\6/'
}

# Funktion zur Verarbeitung einer einzelnen JSON-Datei
process_json_file() {
    local json_file="$1"
    local dir=$(dirname "$json_file")
    local base=$(basename "$json_file" .json)
    local image_file="$dir/$base"
    
    # Überprüfen, ob die Bilddatei existiert
    if [ ! -f "$image_file" ]; then
        echo "Warnung: Keine entsprechende Bilddatei für $json_file gefunden."
        return
    fi
    
    echo "Verarbeite $image_file..."
    
    # Daten aus der JSON-Datei extrahieren
    creation_time=$(jq -r '.photoTakenTime.formatted' "$json_file")
    photo_taken_time=$(jq -r '.photoTakenTime.formatted' "$json_file")
    latitude=$(jq -r '.geoData.latitude' "$json_file")
    longitude=$(jq -r '.geoData.longitude' "$json_file")
    altitude=$(jq -r '.geoData.altitude' "$json_file")
    
    # Datum-Strings in das korrekte Format umwandeln
    creation_time=$(convert_date "$creation_time")
    photo_taken_time=$(convert_date "$photo_taken_time")
    
    # EXIF-Daten aktualisieren
    exiftool -overwrite_original \
             -CreateDate="$creation_time" \
             -DateTimeOriginal="$photo_taken_time" \
             -ModifyDate="$creation_time" \
             -FileCreateDate="$creation_time" \
             -GPSLatitude="$latitude" \
             -GPSLongitude="$longitude" \
             -GPSAltitude="$altitude" \
             "$image_file"
    
    # Datei-Zeitstempel aktualisieren
    touch -t $(date -j -f "%Y:%m:%d %H:%M:%S" "$creation_time" "+%Y%m%d%H%M.%S") "$image_file"
    
    echo "EXIF-Daten und Datei-Zeitstempel für $image_file aktualisiert."
}

# Funktion zum rekursiven Durchsuchen von Verzeichnissen
process_directory() {
    local dir="$1"
    
    # Alle JSON-Dateien im aktuellen Verzeichnis verarbeiten
    for json_file in "$dir"/*.json; do
        [ -e "$json_file" ] || continue  # Überprüfen, ob JSON-Dateien existieren
        process_json_file "$json_file"
    done
    
    # Rekursiv durch Unterverzeichnisse gehen
    for subdir in "$dir"/*/ ; do
        [ -d "$subdir" ] || continue  # Überprüfen, ob es sich um ein Verzeichnis handelt
        process_directory "$subdir"
    done
}

# Starten der Verarbeitung vom aktuellen Verzeichnis aus
process_directory "."

echo "Alle Dateien in allen Unterordnern verarbeitet."
